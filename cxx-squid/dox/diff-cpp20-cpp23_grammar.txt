Annex A (informative)

**A.3 Lexical conventions [gram.lex]**

n-char: one of
   any member of the translation character set except the u+007d right curly bracket or new-line
   character

n-char-sequence:
   n-char
   n-char-sequence n-char

named-universal-character:
   \N{ n-char-sequence }

simple-hexadecimal-digit-sequence:
   hexadecimal-digit
   simple-hexadecimal-digit-sequence hexadecimal-digit

universal-character-name:
   \u hex-quad
   \U hex-quad hex-quad
   \u{ simple-hexadecimal-digit-sequence }
   named-universal-character

h-char:
   any member of the translation character set except new-line and u+003e greater-than sign

q-char:
   any member of the translation character set except new-line and u+0022 quotation mark

pp-number:
   digit
   . digit
   pp-number identifier-continue
   pp-number ’ digit
   pp-number ’ nondigit
   pp-number e sign
   pp-number E sign
   pp-number p sign
   pp-number P sign
   pp-number .

identifier:
   identifier-start
   identifier identifier-continue

identifier-start:
   nondigit
   an element of the translation character set with the Unicode property XID_Start

identifier-continue:
   digit
   nondigit
   an element of the translation character set with the Unicode property XID_Continue

integer-suffix:
   unsigned-suffix long-suffixopt
   unsigned-suffix long-long-suffixopt
   unsigned-suffix size-suffixopt
   long-suffix unsigned-suffixopt
   long-long-suffix unsigned-suffixopt
   size-suffix unsigned-suffixopt

size-suffix: one of
   z Z

c-char:
   basic-c-char
   escape-sequence
   universal-character-name

basic-c-char:
   any member of the translation character set except the u+0027 apostrophe,
   u+005c reverse solidus, or new-line character

escape-sequence:
   simple-escape-sequence
   numeric-escape-sequence
   conditional-escape-sequence

simple-escape-sequence:
   \ simple-escape-sequence-char

simple-escape-sequence-char: one of
   ’ " ? \ a b f n r t v

numeric-escape-sequence:
   octal-escape-sequence
   hexadecimal-escape-sequence

simple-octal-digit-sequence:
   octal-digit
   simple-octal-digit-sequence octal-digit

octal-escape-sequence:
   \ octal-digit
   \ octal-digit octal-digit
   \ octal-digit octal-digit octal-digit
   \o{ simple-octal-digit-sequence }

hexadecimal-escape-sequence:
   \x simple-hexadecimal-digit-sequence
   \x{ simple-hexadecimal-digit-sequence }

conditional-escape-sequence:
   \ conditional-escape-sequence-char

conditional-escape-sequence-char:
   any member of the basic character set that is not an octal-digit, a simple-escape-sequence-char, or the
   characters N, o, u, U, or x

floating-point-suffix: one of
   f l f16 f32 f64 f128 bf16 F L F16 F32 F64 F128 BF16

s-char:
   basic-s-char

   escape-sequence
   universal-character-name

basic-s-char:
   any member of the translation character set except the u+0022 quotation mark,
   u+005c reverse solidus, or new-line character

r-char:
   any member of the translation character set, except a u+0029 right parenthesis followed by
   the initial d-char-sequence (which may be empty) followed by a u+0022 quotation mark

d-char:
   any member of the basic character set except:
   u+0020 space, u+0028 left parenthesis, u+0029 right parenthesis, u+005c reverse solidus,
   u+0009 character tabulation, u+000b line tabulation, u+000c form feed, and new-line

**A.5 Expressions [gram.expr]**

lambda-expression:
   lambda-introducer attribute-specifier-seqopt lambda-declarator compound-statement
   lambda-introducer < template-parameter-list > requires-clauseopt attribute-specifier-seqopt lambda-declarator compound-statement

lambda-introducer:
   [ lambda-captureopt ]

lambda-declarator:
   lambda-specifier-seq noexcept-specifieropt attribute-specifier-seqopt trailing-return-typeopt
   noexcept-specifier attribute-specifier-seqopt trailing-return-typeopt
   trailing-return-typeopt
   ( parameter-declaration-clause ) lambda-specifier-seqopt noexcept-specifieropt attribute-specifier-seqopt trailing-return-typeopt requires-clauseopt

lambda-specifier:
   consteval
   constexpr
   mutable
   static

lambda-specifier-seq:
   lambda-specifier
   lambda-specifier lambda-specifier-seq

requirement-parameter-list:
   ( parameter-declaration-clause )

requirement-seq:
   requirement
   requirement requirement-seq

**A.6 Statements [gram.stmt]**

init-statement:
   expression-statement
   simple-declaration
   alias-declaration

label:
   attribute-specifier-seqopt identifier :
   attribute-specifier-seqopt case constant-expression :
   attribute-specifier-seqopt default :

labeled-statement:
   label statement

compound-statement:
   { statement-seqopt label-seqopt }

label-seq:
   label
   label-seq label

**A.7 Declarations [gram.dcl]**

declaration:
   name-declaration
   special-declaration

name-declaration:
   block-declaration
   nodeclspec-function-declaration
   function-definition
   template-declaration
   deduction-guide
   linkage-specification
   namespace-definition
   empty-declaration
   attribute-declaration
   module-import-declaration

special-declaration:
   explicit-instantiation
   explicit-specialization
   export-declaration

elaborated-type-specifier:
   class-key attribute-specifier-seqopt nested-name-specifieropt identifier
   class-key simple-template-id
   class-key nested-name-specifier templateopt simple-template-id
   enum nested-name-specifieropt identifier

using-enum-declaration:
   using enum using-enum-declarator ;

using-enum-declarator:
   nested-name-specifieropt identifier
   nested-name-specifieropt simple-template-id

linkage-specification:
   extern string-literal { declaration-seqopt }
   extern string-literal name-declaration

**A.8 Modules [gram.module]**

export-declaration:
   export name-declaration
   export { declaration-seqopt }
   export-keyword module-import-declaration

**A.11 Templates [gram.temp]**

concept-definition:
   concept concept-name attribute-specifier-seqopt = constraint-expression ;
